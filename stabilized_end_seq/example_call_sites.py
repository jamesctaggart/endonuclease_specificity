'''
This script loads cleavage summary dataframes as generated by example_process_endmaps.py

It takes these DataFrames and identifies putative cleavage positions using get_cleavage_positions(), then
groups any adjacent positions using strand_specific_groupby()

It then calculates 'normalized_peak_height' (e.g. ref_normalized_peak_height) for WT and KO, which
corresponds to peak height in end seq divided by background window in Rend-seq (i.e. expression normalized peak height)

The ratio of these ratios is the sensitivity value, sometimes here referred to as RR or DB_RR

Shown here is as an example of what would be done for identifying RNase Y sites, given a previously-computed dataframe.
'rny_sites' corresponds to the final object that stores positions of cleavage by RNase Y.
'''

import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
from Bio import SeqIO
from endmap.rr_utils import get_cleavage_sites_RR, plot_2gauss_fit, fit_two_gaussian, get_non_pseudo_RR, \
    bimodal_gaussian_params_to_dict, gaussian, gaussian_sum, count_sites_multidf
from endmap.loc_utils import get_near_coding, get_nearby_gene
from rend_utilities.wig_utils import read_mochiview_reference
import scipy
from _calculate_rpkm import WT_pooled_rpkm

matplotlib.style.use('jct_light_spline')

# region import reference files
mochi_file = 'reference_files/CDS_168.mochiview_v13.txt'
plus_genes, minus_genes = read_mochiview_reference(mochi_file, gene_only=True)
BS168_genome = SeqIO.to_dict(SeqIO.parse("reference_files/B_subtilis_168_NC_000964.3.fa", "fasta"))['NC_000964.3'].seq

with open('path/to/dataframe','rb') as f:
    ses_rny = pickle.load(f)

# region Quantify sensitivity

data_column = 'cds_normalized'
ref_counts_thresh = 10
# ref_counts_thresh = 2  # This is the relaxed 5' end sequencing depth threshold
ref_depth_thresh = 0.05
ko_depth_thresh = 0.05
ref_bg_ratio_thresh = 7.5
minus1_3end_bg_ratio_thresh = 7.5

RR_thresh = 10.56

# Set whether to normalize to peak pairs or CDS signal.
ppnorm = False

rny_sites, rny_grouped, rny_df, _, noKOfilt_sites_434 = get_cleavage_sites_RR(es_df=ses_rny,RR_thresh=RR_thresh,\
    ref_counts_thresh=ref_counts_thresh,ko_id='rny',ref_depth_thresh=ref_depth_thresh,\
        ko_depth_thresh=ko_depth_thresh,ref_bg_ratio_thresh=ref_bg_ratio_thresh,\
            minus1_3end_bg_ratio_thresh=minus1_3end_bg_ratio_thresh,data_column=data_column, ppnorm=ppnorm)

# Flag and remove sites within 50 nt of coding regions so we can focus on mRNA cleavage
near_cds_thresh = 50

labels = ['rny_sites', 'rny_grouped']
for i,df in enumerate([rny_sites, rny_grouped]):
    df = get_near_coding(df, plus_genes=plus_genes, minus_genes=minus_genes, search_threshold=near_cds_thresh)

rny_sites = rny_sites[rny_sites['near_coding']==True]
rny_grouped = rny_grouped[rny_grouped['near_coding']==True]
# endregion

# region Fitting Gaussians to sensitivity distribution
# Fit 2 Gaussians to the high confidence RNase Y sites
# Code based on: https://stackoverflow.com/questions/35990467/fit-mixture-of-two-gaussian-normal-distributions-to-a-histogram-from-one-set-of 

param, sig = fit_two_gaussian(get_non_pseudo_RR(rny_grouped,normalized=True), initial_params = (0, 0.2, 50, 1.5, 0.25, 20), outbase='rny_figures/cds_norm_rny_nopseudo_leftshift')

gp = bimodal_gaussian_params_to_dict(param)
def target_fn(x):
    return gaussian(x, gp['mu2'], gp['sigma2'], gp['a2']) - 0.95 * gaussian_sum(x, gp['mu1'], gp['sigma1'], gp['a1'], gp['mu2'], gp['sigma2'], gp['a2'])
fit_rr_thresh = scipy.optimize.bisect(target_fn, gp['mu1'], gp['mu2']+1, xtol=1e-6)
print('RR threshold from fitting: 10^%s' % str(fit_rr_thresh))
bins = plot_2gauss_fit(get_non_pseudo_RR(rny_grouped,normalized=True),\
                params=param,vline=fit_rr_thresh,xlim=[-2,5],outbase='rny_figures/cds_norm_rny_RR=%s_countthresh=%s_ppnorm=%s' % (str(RR_thresh),str(ref_counts_thresh),str(ppnorm)),get_bins=True,\
                    pseudoX=4.5,pseudo_count=len(rny_sites.loc[rny_sites['ko_pseudocounted']==True]))  # Add back in pseudocounted values, put them all at a value of 4.5
# endregion

for df in [rny_sites]:
    df = get_nearby_gene(df, plus_genes, minus_genes)

# region Pickle sites for downstream analysis
with open('pickles/endseq_rny_sites_sensitivity=%s_rpm_thresh=%s_ppnorm=%s' % (str(RR_thresh),str(ref_counts_thresh),str(ppnorm)),'wb') as f:
    pickle.dump(rny_sites, f)
# endregion
